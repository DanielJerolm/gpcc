/*
    General Purpose Class Collection (GPCC)

    This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
    If a copy of the MPL was not distributed with this file,
    You can obtain one at https://mozilla.org/MPL/2.0/.

    Copyright (C) 2011 Daniel Jerolm
*/

#ifndef ITERMINAL_HPP_201710051354
#define ITERMINAL_HPP_201710051354

#include <cstddef>
#include <cstdint>

namespace gpcc {
namespace cli  {

/**
 * \ingroup GPCC_CLI
 * \brief Interface that must be implemented by terminals that shall be connected to a @ref CLI instance.
 *
 * This interface must be implemented by classes providing a connection to a terminal in
 * order to connect the terminal to a @ref CLI instance.
 *
 * This interface allows to read user input from the terminal. User input could be both
 * readable characters and control sequences read if the user presses a special key, e.g. END.
 *
 * The interface also allows to write data to the terminal. Written data could be both
 * readable characters and control sequences used to control the terminal's cursor and
 * to control the current content of the screen.
 *
 * - - -
 *
 * __Thread safety:__\n
 * The implementation behind this interface shall be thread-safe.
 */
class ITerminal
{
  public:
    virtual size_t Read(char * pBuffer, size_t bufferSize, uint16_t timeout_ms) = 0;
    virtual void Flush(void) = 0;

    virtual void Write(char const * pBuffer, size_t s) = 0;

  protected:
    ITerminal(void) = default;
    virtual ~ITerminal(void) = default;
};

/**
 * \fn size_t ITerminal::Read(char * pBuffer, size_t bufferSize, uint16_t timeout_ms)
 * \brief Reads user input from the terminal.
 *
 * This method shall block until either at least one character of user input has been
 * received from the terminal, or until a timeout has expired. If the given timeout value is zero,
 * then this method shall return immediately, either with or without any characters received from
 * the terminal.
 *
 * If the terminal's input buffer contains more data than read by one call to this method, then
 * the data not read by the current call shall be read by a subsequent call.
 *
 * This method shall return immediately if at least one byte of data is available.
 *
 * "User input" may be both readable characters or special command sequences generated by the
 * terminal if a special key has been hit by the user (e.g. arrow-up/down).
 *
 * - - -
 *
 * __Thread safety requirements/hints:__\n
 * This shall be thread-safe.
 *
 * __Exception safety requirements/hints:__\n
 * This method shall provide at least the basic guarantee:
 * - dropped keystrokes and/or loss of characters is anticipated
 *
 * [CLI](@ref gpcc::cli::CLI) will retry after approx. one second in case of an exception.
 *
 * __Thread cancellation safety requirements/hints:__\n
 * This method will be invoked with deferred thread cancellation disabled.
 *
 * - - -
 *
 * \param pBuffer
 * Pointer to a buffer into which the received data bytes shall be written.\n
 * Note: A trailing null-terminator _shall not_ be written into the buffer.\n
 * `nullptr` is not allowed.
 * \param bufferSize
 * Size of the buffer referenced by parameter 'pBuffer' in bytes.\n
 * Required minimum size: 1.
 * \param timeout_ms
 * Timeout in milliseconds.\n
 * This method will return after the time-span specified by this parameter, if not any character
 * has been received from the terminal before expiration of the timeout.\n
 * If this is zero, then this method will return immediately, either with or without any
 * characters received from the terminal.
 * \return
 * Number of received bytes written into the buffer given by 'pBuffer'.\n
 * Zero will be returned in case of a timeout condition and no data available.
 */

/**
 * \fn void ITerminal::Flush(void)
 * \brief Flushes any input from the terminal and related input buffers.
 *
 * This method shall flush any input from the terminal's buffers and it shall return without blocking.
 *
 * This method will be invoked by class [CLI](@ref gpcc::cli::CLI) before user input is expected by
 * class [CLI](@ref gpcc::cli::CLI).\n
 * The intention is to remove any user input entered into the terminal while the CLI was busy
 * executing a command or waiting for delay expiration after the user has entered a wrong
 * password.
 *
 * - - -
 *
 * __Thread safety requirements/hints:__\n
 * This shall be thread-safe.
 *
 * __Exception safety requirements/hints:__\n
 * This method shall provide at least the basic guarantee:
 * - incomplete flush is anticipated
 *
 * [CLI](@ref gpcc::cli::CLI) will retry after approx. one second in case of an exception.
 *
 * __Thread cancellation safety requirements/hints:__\n
 * This method will be invoked with deferred thread cancellation disabled.
 */

/**
 * \fn void ITerminal::Write(char const * pBuffer, size_t s)
 * \brief Writes data to the terminal.
 *
 * This method is used by class [CLI](@ref gpcc::cli::CLI) to send data to the terminal. The data may
 * be comprised of both readable characters that shall be printed to the user and of special control
 * sequences used to control the terminal's cursor and to modify the terminal's screen content.
 *
 * - - -
 *
 * __Thread safety requirements/hints:__\n
 * This shall be thread-safe.
 *
 * __Exception safety requirements/hints:__\n
 * This method shall provide at least the basic guarantee:
 * - incomplete or undefined content of the terminal's screen is anticipated
 *
 * __Thread cancellation safety requirements/hints:__\n
 * This method shall provide at least the basic guarantee:
 * - incomplete or undefined content of the terminal's screen is anticipated
 *
 * - - -
 *
 * \param pBuffer
 * Pointer to the buffer containing the data that shall be written to the terminal.\n
 * This could be `nullptr` if parameter 's' is zero.\n
 * There shall be no trailing null-terminator inside the buffer.
 * \param s
 * Number of bytes that shall be sent to the terminal.\n
 * Zero is allowed.
 */

} // namespace cli
} // namespace gpcc

#endif // ITERMINAL_HPP_201710051354
