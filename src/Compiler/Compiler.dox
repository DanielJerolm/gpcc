/*
    General Purpose Class Collection (GPCC)
    Copyright (C) 2019 Daniel Jerolm

    This file is part of the General Purpose Class Collection (GPCC).

    The General Purpose Class Collection (GPCC) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The General Purpose Class Collection (GPCC) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.

                                      ---

    A special exception to the GPL can be applied should you wish to distribute
    a combined work that includes the General Purpose Class Collection (GPCC), without being obliged
    to provide the source code for any proprietary components. See the file
    license_exception.txt for full details of how and when the exception can be applied.
*/

/**
 * @ingroup GPCC
 * @defgroup GPCC_COMPILER Compiler
 *
 * \brief Portable abstractions for compiler-specific stuff.
 *
 * GPCC provides an abstraction for several compiler-specific functions and language specifics based on:
 * - Compiler
 * - CPU architecture
 *
 * The following stuff is provided by GPCC's compiler abstraction:
 * - Portable keywords for packet structs
 * - Portable keywords for declaring non-returning functions
 * - `#defines` indicating the system's endian
 * - Overflow-aware arithmethic functions
 *
 * # Usage
 * To access any of GPCC's compiler abstraction stuff you just have to include the
 * desired header files located in GPCC/Compiler.
 *
 * _Do not include headers from the subdirectorys of GPCC/Compiler._\n
 * The headers located in GPCC/Compiler will include the required headers according to your
 * specific compiler and CPU architecture. For details please refer to section "Configuration" below:
 *
 * # Configuration
 * To select a sepcific compiler abstraction implementation for your project please set the defines as
 * described in GPCC/readme.txt.
 */
