/*
    General Purpose Class Collection (GPCC)
    Copyright (C) 2019 Daniel Jerolm

    This file is part of the General Purpose Class Collection (GPCC).

    The General Purpose Class Collection (GPCC) is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The General Purpose Class Collection (GPCC) is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.

                                      ---

    A special exception to the GPL can be applied should you wish to distribute
    a combined work that includes the General Purpose Class Collection (GPCC), without being obliged
    to provide the source code for any proprietary components. See the file
    license_exception.txt for full details of how and when the exception can be applied.
*/

/**
 * @ingroup GPCC
 * @defgroup GPCC_COOD CANopen Object Dictionary
 *
 * \brief A object dictionary compliant to CANopen and EtherCAT.
 */

/**
 * @ingroup GPCC_COOD
 * @defgroup GPCC_COOD_EXCEPTIONS Exceptions
 *
 * \brief CANopen object dictionary related exceptions.
 */

/**
 * @ingroup GPCC_COOD
 * @defgroup GPCC_COOD_DATATYPES Data Types
 *
 * \brief CANopen data type definition and basic conversion functions.
 *
 * This group contains the [DataType](@ref gpcc::cood::DataType) enum which contains an enumeration of the
 * available CANopen data types and the associated native data types that can be used in CANopen objects.
 *
 * Two tables are provided to look-up the bit-size of CANopen data types and of the associated native data types.
 * See section "Variables" above.
 *
 * Two functions are provided to classify data types into types using bit-stuffing and types not using
 * bit-stuffing. See section "Functions" above.
 *
 * Finally two functions are provided to translate a human-readable string into CANopen data and the other
 * way round. See section "Functions" above.
 */

/**
 * @ingroup GPCC_COOD
 * @defgroup GPCC_COOD_SDOABORTCODES SDO Abort Codes
 *
 * \brief CANopen/EtherCAT SDO Abort Codes.
 */
